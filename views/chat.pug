doctype html
html(lang="es")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Agenda IA
    style.
      body, html {
        height: 100%;
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #f3f3f3;
      }
      .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        box-sizing: border-box;
        background: linear-gradient(135deg, #e0d8ff, #c8b6ff);
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      h1 {
        color: #333;
        margin-bottom: 20px;
      }
      #chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 20px;
      }
      .message {
        max-width: 80%;
        margin-bottom: 10px;
        padding: 8px 12px;
        border-radius: 18px;
        font-size: 14px;
        line-height: 1.4;
      }
      .user-message {
        background-color: #ffffff;
        color: #333;
        align-self: flex-end;
        margin-left: auto;
      }
      .bot-message {
        background-color: #e6e0ff;
        color: #333;
        align-self: flex-start;
      }
      #message-form {
        display: flex;
        align-items: center;
      }
      #message-input {
        flex-grow: 1;
        padding: 10px;
        font-size: 16px;
        border: none;
        background-color: #ffffff;
        border-radius: 20px 0 0 20px;
      }
      #message-input:focus {
        outline: none;
      }
      button {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #9f8fff;
        color: white;
        border: none;
        border-radius: 0 20px 20px 0;
        cursor: pointer;
      }
      button:hover {
        background-color: #8a75ff;
      }
      .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #e6e0ff;
        border-radius: 50%;
        border-top-color: #9f8fff;
        animation: spin 1s ease-in-out infinite;
      }
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
      #record-button {
        background-color: #ff4f4f;
        margin-right: 10px;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      #record-button.recording {
        animation: pulse 1s infinite;
      }
      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }
      .audio-message {
        display: flex;
        align-items: center;
        gap: 10px;
      }
      .audio-player {
        height: 30px;
        border-radius: 15px;
      }
      .audio-player::-webkit-media-controls-panel {
        background-color: transparent;
      }
      .audio-player::-webkit-media-controls-current-time-display,
      .audio-player::-webkit-media-controls-time-remaining-display {
        color: #333;
      }
  body
    .chat-container
      h1 Agenda IA
      #chat-messages
      form#message-form
        button#record-button(type="button") 🎤
        input#message-input(type="text", placeholder="Escribe tu mensaje aquí", required)
        button(type="submit") Enviar

    script.
      const chatMessages = document.getElementById('chat-messages');
      const messageForm = document.getElementById('message-form');
      const messageInput = document.getElementById('message-input');
      const recordButton = document.getElementById('record-button');
      
      const idUsuario = '#{idUsuario}';
      const idCalendario = '#{idCalendario}';
      
      let mediaRecorder = null;
      let audioChunks = [];
      let isRecording = false;

      const hasRecordingSupport = () => {
        return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
      };

      async function toggleRecording() {
        try {
          if (!hasRecordingSupport()) {
            throw new Error('Tu navegador no soporta la grabación de audio');
          }

          if (isRecording) {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
              mediaRecorder.stop();
              isRecording = false;
              recordButton.textContent = '🎤';
              recordButton.classList.remove('recording');
            }
          } else {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            audioChunks = [];
            mediaRecorder = new MediaRecorder(stream);
            
            mediaRecorder.ondataavailable = (event) => {
              audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
              const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
              sendAudioToServer(audioBlob);
              
              stream.getTracks().forEach(track => track.stop());
            };

            mediaRecorder.start();
            isRecording = true;
            recordButton.textContent = '⏹️';
            recordButton.classList.add('recording');
          }
        } catch (error) {
          console.error('Error al acceder al micrófono:', error);
          addMessage('bot', `Error: ${error.message || 'No se pudo acceder al micrófono'}`);
          recordButton.textContent = '🎤';
          recordButton.classList.remove('recording');
          isRecording = false;
        }
      }

      recordButton.addEventListener('click', () => {
        toggleRecording().catch(error => {
          console.error('Error en la grabación:', error);
          addMessage('bot', 'Error: No se pudo iniciar la grabación');
        });
      });

      // Para procesar mensajes de audio
      function sendAudioToServer(audioBlob) {
        const formData = new FormData();
        formData.append('audio', audioBlob, 'recording.wav');
        formData.append('idUsuario', idUsuario);
        formData.append('idCalendario', idCalendario);

        addAudioMessage('user', audioBlob);

        const loadingMessage = addMessage('bot', '');
        const loadingIcon = document.createElement('div');
        loadingIcon.className = 'loading';
        loadingMessage.appendChild(loadingIcon);

        fetch('/procesar-audio', {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Error en la respuesta del servidor');
          }
          return response.blob();
        })
        .then(audioBlob => {
          loadingMessage.remove();
          addAudioMessage('bot', audioBlob);
        })
        .catch(error => {
          loadingMessage.remove();
          console.error('Error:', error);
          addMessage('bot', 'Error: No se pudo procesar el audio.');
        });
      }
      
      // Para procesar mensajes de texto
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const mensajeUsuario = messageInput.value.trim();
        if (mensajeUsuario) {
          addMessage('user', mensajeUsuario);
          messageInput.value = '';

          const loadingMessage = addMessage('bot', '');
          const loadingIcon = document.createElement('div');
          loadingIcon.className = 'loading';
          loadingMessage.appendChild(loadingIcon);

          fetch('/consultar-agenda', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ mensaje: mensajeUsuario, idUsuario: idUsuario, idCalendario: idCalendario })
          })
          .then(response => response.json())
          .then(data => {
            loadingMessage.remove();
            if (data && data.respuesta && data.respuesta[0] && data.respuesta[0].content[0].text.value) {
              const respuestaBot = data.respuesta[0].content[0].text.value;
              addMessage('bot', respuestaBot);
            } else {
              addMessage('bot', 'Error: Respuesta inválida del servidor.');
            }
          })
          .catch(error => {
            loadingMessage.remove();
            console.error('Error:', error);
            addMessage('bot', 'Error: No se pudo obtener la respuesta del servidor.');
          });
        }
      });

      function addMessage(sender, text) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', `${sender}-message`);
        messageElement.textContent = text;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        return messageElement;
      }

      function addAudioMessage(sender, audioBlob) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', `${sender}-message`, 'audio-message');
        
        const audioElement = document.createElement('audio');
        audioElement.src = URL.createObjectURL(audioBlob);
        audioElement.controls = true;
        audioElement.classList.add('audio-player');
        messageElement.appendChild(audioElement);
        
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        return messageElement;
      }